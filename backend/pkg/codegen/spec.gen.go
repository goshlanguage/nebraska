// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
