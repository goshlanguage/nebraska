// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
