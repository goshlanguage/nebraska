// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
