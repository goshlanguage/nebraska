// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
