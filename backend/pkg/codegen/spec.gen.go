// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
