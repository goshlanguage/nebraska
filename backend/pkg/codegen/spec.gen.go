// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"DdGvtm72+/8GAAD///epFaNVgQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
