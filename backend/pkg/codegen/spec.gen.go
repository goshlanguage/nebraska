// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
