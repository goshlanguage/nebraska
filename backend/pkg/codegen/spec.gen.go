// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
